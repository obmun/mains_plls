--------------------------------------------------------------------------------
-- *** Description ***
--
-- Alpha == the multiplication factor needed for normalizing the input signal
--
-- ** Reset del bucle de amplitud **
--
-- El bucle de amplitud hace uso internamente de un procedimiento de reset COMPLEJO. Una vez lanzado
-- un reset síncrono, la señal de done bajará a 0 y no retornará a 1 hasta que el reset haya
-- finalizado. Monitorícelo antes de solicitar una ejecución, ya que la solicitud será desatendida
-- mientras se esté produciendo el reset.
--
-- ** Selección de rutas **
--
-- * Análisis de amplitud sencillo *
--
-- Idealmente, la entrada debería estar normalizada => rango = [-1, 1]
-- Nuestra señal recuperada, también está normalizada.
--
-- Una reducción hasta un 10% de amplitud supone rango = [-0.1, 0.1]. Al cuadrado: [0, 0.01]
--   Con 12 bits de parte fraccionaria, la precisión es: 2^-12 = 0.000244
--
-- Una amplitud doble (lo que en efecto serían tensiones de red de 460 V) supondría rango = [-2, 2].
-- Al cuadrado: rango = [0, 4]
--  Con 3 bits de magn (la magnitud normal), la amplitud max es approx 7.999
--
-- En los productos de entrada y sumadores de cálculo de error, "deberíamos" tener suficiente
-- precisión y amplitud como para trabajar con el formato de pipeline _normal_.
--
-- EL PROBLEMA SURGE AL MULTIPLICAR "LA SEÑAL DE ENTRADA AL CUADRADO" Y EN LAS ETAPAS DE FILTRADO.
--
-- La señal de "error" total en el controlador PI puede ser alta.
--
-- Sabemos que 1 + salida_PI (+ LPF) = alfa (factor de escalado de la entrada para que esté normalizada).
-- Si tenemos una entrada de 10% de su valor, alfa = 10 => salida_PI = 9!, incluso en régimen
-- permanente.
--
-- Eso significa que:
--
-- 1) La etapa de filtrado debe soportar amplitudes fuertes sin DESBORDAR, porque corre el riesgo de
-- sufrir limit cycles por desbordamiento (recordemos que no estamos usando aritmética de
-- saturación).
--
--  La pipeline ext. para filtros usa prec = 15 => 2 bits magn! (hasta 3.9999). Muy justa.
--
-- 2) El multiplicador de la entrada al cuadrado por alfa tiene que soportar bien factores en una de
-- las entradas de hasta 10!
--
-- * Selección del formato de palabra *
--
-- Con la precisión normal, estamos servidos en el pipeline, _EXCEPTO EN LOS FILTROS_. Para los
-- filtros necesitamos más precisión.
--
-- La amplitud normal, de hasta 7.999 (3 bits de magnitud), podría ser prácticamente válida (deja
-- margen suficiente para el desbordamiento).
--
-- La precisión por defecto extendida para los filtros es de 15 bits, lo que incluso en el pipeline
-- extendido no deja más que 2 bits de magnitud, claramente insuficiente.
--
-- POR LO TANTO, EN FILTRADO y EN LOS LUGARES DONDE LA MAGNITUD PUEDA SER ALTA, deberemos trabajar
-- con un PIPELINE EXTENDIDO pero empleando una precisión ligeramente menor que la empleada en los
-- filtros IIR habituales (15). Se trabajará con una prec = 14, 3 bits de magn y 1 de signo.
--
-- * Los filtros *
--
-- Están todos implementados con estructuras IIR => necesitamos precisión extendida para tener un
-- comportamiento correcto. El integrador también conviene que tenga la precisión extendida del
-- pipeline para filtrado (15 bits), ya que la ganancia empleada en el mismo es baja (10), con lo
-- que el escalado por el paso de muestreo reduce mucho la señal de entrada.
--
-- El FA también debe de hacer uso del pipeline extendido.
--
-- Pero, como justificamos antes, NO PUEDO USAR la prec ext. de 15 bits y el ancho total de 18. NO
-- ME LLEGAN!
--
-- *** Revisions ***
--
-- NO MORE REVISIONS - Check project Mercurial history
-- Revision 0.01 - File Created
--
-- *** TODO ***
--
-- 1) Change the name of the architecture. It's not an 'algorithmic' one, but structural
--------------------------------------------------------------------------------
#include "configuration.inc"

library IEEE;
library WORK;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;
use IEEE.MATH_REAL.all;
use WORK.COMMON.all;


entity ampl_loop is
     -- rev 0.01
     port (
          clk, run, rst : in std_logic;
          in_signal, our_signal : in std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
          norm_in_signal : out std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
          done : out std_logic);
end ampl_loop;


architecture alg of ampl_loop is
     -- Types
     type state_t is (ST_RST, ST_DONE, ST_RUNNING, ST_RUNNING_LAST_STAGES);

     -- PREC definition
     constant AMPL_LOOP_EXT_PREC : natural := 14;
     
     -- Gain and filter constants
     constant PI_I_CONST : real := 10.0;
     constant PI_P_CONST : real := 2.0;
     constant FA_DELAY_SIZE : natural := 200; -- fs / 50 Hz = 10000 / 50 = 200

     -- * Internal elements control *
     signal st : state_t;
     
     signal sqrt_error_s : std_logic;
     signal sqrt_done_s, sqrt_done_pulsed_s, fa_delayed_done_s, pi_integrator_done_s, lpf_done_s, filter_stage_done_s : std_logic;
     signal filter_stage_done_i_s : std_logic_vector(1 downto 0);
     signal first_run_s, first_run_pulsed_s, first_run_pulsed_REG_s : std_logic;
     
     signal forced_fa_run_s, fa_rst_s, null_fa_i_s, rst_s, done_s : std_logic;

     signal garbage_1_s, garbage_2_s, garbage_3_s : std_logic;

     -- * DATA PATH *
     -- Extended width
     signal squared_in_norm_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     signal squared_alpha_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     signal error_EXT_s, error_REG_EXT_s, pi_kp_out_EXT_s, int_error_EXT_s, filtered_error_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     signal error_adder_1_out_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     signal alpha_EXT_s, filtered_alpha_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     -- Normal width (FX4.16)
     signal in_reg_out_s : std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
     signal squared_norm_s, squared_in_s : std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
begin
     -- Storage for the input value. Needed for complying with run_done iface. Otherwise, we cannot
     -- let the user change the value of this port, as norm_in_signal output is directly connected
     -- to this input.
     in_reg_i : entity work.reg(alg)
          generic map ( width => PIPELINE_WIDTH )
          port map (
               clk => clk,
               rst => rst_s,
               we => first_run_pulsed_s,
               i => in_signal,
               o => in_reg_out_s);

     -- Tan solo los dos cuadrados irán en pipeline normal
     
     our_square : entity work.mul(beh)
          generic map (width => PIPELINE_WIDTH, prec => PIPELINE_PREC)
          port map (our_signal, our_signal, squared_norm_s);
     
     in_square : entity work.mul(beh)
          generic map (width => PIPELINE_WIDTH, prec => PIPELINE_PREC)
          port map (in_signal, in_signal, squared_in_s);

     -- El resto de entidades irán prácticamente todas en pipeline extendido

     in_mul_n_conv: block is
          signal squared_in_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     begin
          conv_i : entity work.pipeline_conv(alg)
               generic map (
                    PIPELINE_WIDTH, PIPELINE_PREC,
                    EXT_PIPELINE_WIDTH, AMPL_LOOP_EXT_PREC)
               port map ( squared_in_s, squared_in_EXT_s);
     
          in_mul : entity work.mul(beh)
               generic map (width => EXT_PIPELINE_WIDTH, prec => AMPL_LOOP_EXT_PREC)
               port map (squared_in_EXT_s, squared_alpha_EXT_s, squared_in_norm_EXT_s);
     end block in_mul_n_conv;
     

     error_sub_n_conv: block is
          signal squared_norm_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
     begin
          error_s_conv : entity work.pipeline_conv(alg)
               generic map (
                    PIPELINE_WIDTH, PIPELINE_PREC,
                    EXT_PIPELINE_WIDTH, AMPL_LOOP_EXT_PREC)
               port map ( squared_norm_s, squared_norm_EXT_s);          
     
          error_sub : entity work.subsor(alg)
               generic map ( width => EXT_PIPELINE_WIDTH )
               port map (
                    a => squared_norm_EXT_s, b => squared_in_norm_EXT_s, o => error_EXT_s,
                    f_ov => open, f_z => open);     
     end block error_sub_n_conv;

     
     kcm_int_i : entity work.kcm_integrator(beh)
          generic map (
               width => EXT_PIPELINE_WIDTH, prec => AMPL_LOOP_EXT_PREC,
               k => PI_I_CONST)
          port map (
               clk => clk, rst => rst_s,
               i => error_EXT_s, o => int_error_EXT_s,
               run_en => first_run_pulsed_s, run_passthru => pi_integrator_done_s,
               delayer_in(0) => '-',
               delayer_out(0) => garbage_3_s);          
     
     first_run_s <= done_s and run;
     first_run_pulser : entity work.done_pulser(beh)
          port map (
               clk => clk,
               en  => '1',
               rst => rst_s,
               i   => first_run_s,
               o   => first_run_pulsed_s);

     -- There is an amazingly large combinational path on the Kp + LPF + input loop
     -- It must be broken for speed reasons
     --
     -- ALSO, without any kind of 'wall' logic in the middle, once an XXX state enters the loop, IT
     -- NEVER GOES OUT! So, this register is BASIC for the correct operation of the filter.
     --
     -- Remember that, since a few weeks ago, the 1st_order_lpf is a 0 latency BLOCK, so input is
     -- directly connected to output without a register. That also means that, when LPF internal
     -- state is updated, output must have been already consumed (stored) elsewhere.
     kp_path_speed_up_reg : entity work.reg(alg)
          generic map (
               width => EXT_PIPELINE_WIDTH + 1)
          port map (
               clk => clk,
               rst => rst_s,
               we  => '1',
               i(EXT_PIPELINE_WIDTH - 1 downto 0) => error_EXT_s,
               i(EXT_PIPELINE_WIDTH) => first_run_pulsed_s,
               o(EXT_PIPELINE_WIDTH - 1 downto 0) => error_REG_EXT_s,
               o(EXT_PIPELINE_WIDTH) => first_run_pulsed_REG_s);
     
     pi_kp_mul : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
          generic map ( width => EXT_PIPELINE_WIDTH, prec => AMPL_LOOP_EXT_PREC, k => PI_P_CONST ) 
          port map ( i => error_REG_EXT_s, o => pi_kp_out_EXT_s );

     lpf_i : entity work.first_order_lpf(alg)
          generic map (
               width => EXT_PIPELINE_WIDTH,
               prec  => AMPL_LOOP_EXT_PREC)
          port map (
               clk => clk, rst => rst_s,
               i => pi_kp_out_EXT_s, o => filtered_error_EXT_s,
               run_en => first_run_pulsed_REG_s, run_passthru => lpf_done_s,
               delayer_in(0) => '-',
               delayer_out(0) => garbage_2_s);
     
     filter_stage_done_i_s(0) <= lpf_done_s;
     filter_stage_done_i_s(1) <= pi_integrator_done_s;     
     filter_stage_done_gen_i : entity work.pulsed_done_and(beh)
          generic map (
               width => 2)
          port map (
               clk => clk,
               rst => rst_s,
               i   => filter_stage_done_i_s,
               o   => filter_stage_done_s);
     -- The previous way of generating first_stage_done_s was:
     -- filter_stage_done_s <= lpf_done_s and pi_integrator_done_s;
     -- This is very fragile, as it works only because both stages end at the _same_ exact cycle.
     -- Let's make use of the new pulsed_done_and entity

     error_adder_1 : entity work.adder(alg)
          generic map ( EXT_PIPELINE_WIDTH )
          port map (
               a => int_error_EXT_s, b => filtered_error_EXT_s,
               o => error_adder_1_out_EXT_s);

     error_adder_2 : entity work.adder(alg)
          generic map ( EXT_PIPELINE_WIDTH )
          port map (
               a => error_adder_1_out_EXT_s, b => to_vector(1.0, EXT_PIPELINE_WIDTH, AMPL_LOOP_EXT_PREC),
               o => squared_alpha_EXT_s);

     
     -- Element with HARDCODED EXTENDED PIPELINE
     sqrt_i : entity work.sqrt(alg)
          generic map ( AMPL_LOOP_EXT_PREC )
          port map (
               clk => clk, rst => rst_s, run => filter_stage_done_s,
               i => squared_alpha_EXT_s, o => alpha_EXT_s,
               done => sqrt_done_s , error_p => sqrt_error_s);

     -- assert sqrt_error_s = '0' report "ERROR in SQRT calculation!" severity failure;

     sqrt_done_pulser : entity work.done_pulser(beh)
          port map (
               clk => clk,
               en  => '1',
               rst => rst_s,
               i   => sqrt_done_s,
               o   => sqrt_done_pulsed_s);

     -- Applies a 50 Hz syntonized MVA to the alpha signal
     --
     -- Remember that FA is a 0 clk latency block. That means that I have to register the block
     -- myself due to the _direct_ connection with apml_loop output, which must follow run_done rules
     fa_filtering: block is
          -- Normal IIR prec is 15, but we're filtering the inverse of the input amplitud. So, for
          -- example, if we see a dip of 0.3333 * p.u., 1/ampl = 3. With 14 prec bits, we're left
          -- with 4 magn bits, which includes 1 sign bit. That means we have 3 magn bits, which
          -- allows us to have a value of up to 7.9999999, which should be enough.
          --
          -- As we know, we cannot ALLOW the filter to OVERFLOW!!
          signal fa_i_s, out_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
          signal int_fa_done_s, fa_run_en_s : std_logic;
     begin
          fa_i_s <= (others => '0') when (null_fa_i_s = '1') else alpha_EXT_s;

          fa_run_en_s <= sqrt_done_pulsed_s or forced_fa_run_s;
          fa_i : entity work.fa(beh)
               generic map (
                    width => EXT_PIPELINE_WIDTH,
                    prec => AMPL_LOOP_EXT_PREC,
                    delay => FA_DELAY_SIZE,
                    delayer_width => 1)
               port map (
                    clk => clk, rst => fa_rst_s,
                    i => fa_i_s, o => out_s,
                    run_en => fa_run_en_s, 
                    run_passthru => int_fa_done_s,
                    delayer_in(0) => '-',
                    delayer_out(0) => garbage_1_s);

          fa_out_reg_i : entity work.reg(alg)
               generic map (
                    width => EXT_PIPELINE_WIDTH)
               port map (
                    clk => clk, rst => rst_s,
                    we => int_fa_done_s,
                    i => out_s, o => filtered_alpha_EXT_s);

          done_delayer_i : entity work.reg(alg)
               generic map (
                    width => 1)
               port map (
                    clk => clk,
                    rst => rst_s,
                    we => '1',
                    i(0) => int_fa_done_s,
                    o(0) => fa_delayed_done_s);
     end block;

     norm_mul: block is
          signal in_reg_out_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
          signal norm_in_signal_EXT_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
          signal norm_in_signal_s : std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
     begin
          in_reg_out_conv : entity work.pipeline_conv(alg)
               generic map (
                    PIPELINE_WIDTH, PIPELINE_PREC,
                    EXT_PIPELINE_WIDTH, AMPL_LOOP_EXT_PREC)
               port map ( in_reg_out_s, in_reg_out_EXT_s);          

          norm_mul : entity work.mul(beh)
               generic map (width => EXT_PIPELINE_WIDTH, prec => AMPL_LOOP_EXT_PREC)
               port map (filtered_alpha_EXT_s, in_reg_out_EXT_s, norm_in_signal_EXT_s);

          norm_in_signal_conv : entity work.pipeline_conv(alg)
               generic map (
                    EXT_PIPELINE_WIDTH, AMPL_LOOP_EXT_PREC,
                    PIPELINE_WIDTH, PIPELINE_PREC)
               port map ( norm_in_signal_EXT_s, norm_in_signal_s );          

          norm_in_signal <= norm_in_signal_s;
     end block norm_mul;


     fsm: block is
          constant CTR_WIDTH : natural := abs(integer(ceil(log2(real(FA_DELAY_SIZE + 1)))));
          signal ctr_val_s : unsigned(CTR_WIDTH - 1 downto 0);
     begin
          ctr : process(clk, rst)
               variable val : unsigned(CTR_WIDTH - 1 downto 0);
          begin
               if (rising_edge(clk)) then
                    if (rst = '1') then
                         val := to_unsigned(FA_DELAY_SIZE + 1, CTR_WIDTH);
                    else
                         if (val = 0) then
                              val := (others => '1');
                         else
                              val := val - 1;
                         end if;
                    end if;
                    ctr_val_s <= val;
               end if;
          end process;
          
          st_ctrl : process(clk, rst, run, ctr_val_s, filter_stage_done_s, fa_delayed_done_s, sqrt_done_s)
          begin
               if (rising_edge(clk)) then
                    if (rst = '1') then
                         st <= ST_RST;
                    else
                         case st is
                              when ST_RST =>
                                   if (ctr_val_s = to_unsigned(0, CTR_WIDTH)) then
                                        st <= ST_DONE;
                                   else
                                        st <= ST_RST;
                                   end if;
                              when ST_DONE =>
                                   if (run = '1') then
                                        st <= ST_RUNNING;
                                   else
                                        st <= ST_DONE;
                                   end if;
                              when ST_RUNNING =>
                                   if (filter_stage_done_s = '1') then
                                        st <= ST_RUNNING_LAST_STAGES;
                                   else
                                        st <= ST_RUNNING;
                                   end if;
                              when ST_RUNNING_LAST_STAGES =>
                                   if (fa_delayed_done_s = '1' and sqrt_done_s = '1') then
                                        st <= ST_DONE;
                                   else
                                        st <= ST_RUNNING_LAST_STAGES;
                                   end if;
                              when others =>
                                   report "Unkown ampl. loop state! Should not happen!"
                                        severity failure;
                                   st <= st;
                         end case;
                    end if;
               end if;
          end process;

          signal_gen : process(st, ctr_val_s, fa_delayed_done_s, sqrt_done_s)
          begin
               case st is
                    when ST_RST =>
                         rst_s <= '1';
                         if (ctr_val_s = to_unsigned(0, CTR_WIDTH)) then
                              forced_fa_run_s <= '0';
                              fa_rst_s <= '1';
                         else
                              forced_fa_run_s <= '1';
                              fa_rst_s <= '0';
                         end if;
                         null_fa_i_s <= '1';
                         done_s <= '0';
                    when ST_DONE =>
                         rst_s <= '0';
                         forced_fa_run_s <= '0';
                         fa_rst_s <= '0';
                         null_fa_i_s <= '0';
                         done_s <= '1';
                    when ST_RUNNING =>
                         rst_s <= '0';
                         forced_fa_run_s <= '0';
                         fa_rst_s <= '0';
                         null_fa_i_s <= '0';
                         done_s <= '0';
                    when ST_RUNNING_LAST_STAGES =>
                         rst_s <= '0';
                         forced_fa_run_s <= '0';
                         fa_rst_s <= '0';
                         null_fa_i_s <= '0';
                         done_s <= fa_delayed_done_s and sqrt_done_s;
                    when others =>
                         rst_s <= '0';
                         forced_fa_run_s <= '0';
                         fa_rst_s <= '0';
                         null_fa_i_s <= '0';
                         done_s <= '0';
               end case;
          end process;          
     end block fsm;
     done <= done_s;
end alg;
