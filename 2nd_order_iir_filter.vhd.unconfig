--------------------------------------------------------------------------------
-- === IMPORTANT NOTES ===
-- MUST BE PREPROCESSED
-- 
-- === Brief DESCRIPTION ===
-- Class: sequential
-- Latency: 1 clk [see each architecture notes]
-- Throughoutput: depends on architecture
--
-- 2nd order IIR filter, implemented with a Transposed-Form IIR filter
-- structure.
--
-- === Description ===
--
-- The IIR form which better stands coefficient quantization artifacts is the
-- IIR cascade form. We're implementing a Transposed-Form because it minimizes
-- the # of adders and memory elements to be used (see http://cnx.org/content/m11919/latest/)
--
-- Implements the following transfer function (in z):
--  b_0 + b_1 * z^-1 + b_2 * z^-2
-- -------------------------------
--   1 + a_1 * z^-1 + a_2 * z^-2
--
-- == Ports ==
--
-- See description of the "run_passthru" interface for a definition of the control signals.
--
-- = Generics =
-- * width: ports and internal pipeline width
-- * prec: ports and internal pipeline precision
-- * b0, b1, b2, a1, a2: see previous transfer function. Self-explained.
--
-- = Inputs =
-- -> CLK
-- -> RST: synchronous reset
-- -> RUN:
--
-- = Outputs =
-- ->
--
-- == Speed ==
--
-- The combinational path between input and output, due to the multiple adders and constant
-- multiplications, is deep, even if this element has registers for unit delay
-- implementation. Therefore, internally, an additional register is added for speeding things up.
--
-- Register is positioned in 2 different places, resulting in 2 different architectures:
-- * structural_tdfii
--   With the speed-up register just buffering the final output signal. Stupid solution that can be
--   easily improved. Just don't use it. See next architecture.
-- * fast_structural_tdfii
--   Speed-up register is buffering the final output, but input to feedback multipliers is also
--   taken from this input register, greatly reducing the max delay without adding additional
--   latency to the block. However, throughtput is reduced by a half, as total # of cycles per sample is 2,
--   but latency is kept at 1 cycle. In our usual configurations, this is not a problem as we have
--   to wait more for an initial long iterative element like a CORDIC.
-- 
-- === Changelog ===
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
--------------------------------------------------------------------------------

#include "configuration.inc"

library IEEE;
use WORK.COMMON.all;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;


entity filter_2nd_order_iir is
        generic (
                width : natural := PIPELINE_WIDTH;
                prec  : natural := PIPELINE_PREC;
                b0 : real;
                b1 : real;
                b2 : real;
                a1 : real;
                a2 : real;
                -- Seq. block iface
                delayer_width : natural := 1);
        port (
                clk, rst : in std_logic;
                i : in std_logic_vector(width - 1 downto 0);
                o : out std_logic_vector(width - 1 downto 0);
                run_en : in std_logic;
                run_passthru : out std_logic;
                delayer_in : in std_logic_vector(delayer_width - 1 downto 0);
                delayer_out : out std_logic_vector(delayer_width - 1 downto 0));
end filter_2nd_order_iir;


-- *** Brief description ***
--
-- Latency: 1 clk [pipeline is "registered" at final output pt, for reducing combinational path length]
-- Throughoutput:  sample/clk [internal state must be updated]
architecture structural_tdfii of filter_2nd_order_iir is
        signal o_s : std_logic_vector(width - 1 downto 0);
        signal o_reg_s : std_logic_vector(width - 1 downto 0);

        signal b0_mult_out_s, b1_mult_out_s, b2_mult_out_s : std_logic_vector(width - 1 downto 0);
        signal a1_mult_out_s, a2_mult_out_s : std_logic_vector(width - 1 downto 0);
        signal z1_out_s, z2_out_s : std_logic_vector(width - 1 downto 0);
        signal z1_adder_out_s, z2_adder_out_s : std_logic_vector(width - 1 downto 0);

        signal delayer_in_s, delayer_out_s : std_logic_vector(delayer_width - 1 downto 0);
begin
        b0_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => b0)
                port map (
                        i => i,
                        o => b0_mult_out_s);

        z0_adder : entity work.adder(alg)
                generic map (
                        width => width)
                port map (
                        a => b0_mult_out_s,
                        b => z1_out_s,
                        o => o_s,
                        f_ov => open,
                        f_z => open);

        z1 : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we  => run_en,
                        rst => rst,
                        i   => z1_adder_out_s,
                        o   => z1_out_s);

        z1_adder : entity work.tri_adder(beh)
                generic map (
                        width => width)
                port map (
                        a => b1_mult_out_s,
                        b => a1_mult_out_s,
                        c => z2_out_s,
                        o => z1_adder_out_s,
                        f_ov => open,
                        f_z => open);

        b1_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => b1)
                port map (
                        i => i,
                        o => b1_mult_out_s);

        a1_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => -a1)
                port map (
                        i => o_s,
                        o => a1_mult_out_s);

        z2 : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we  => run_en,
                        rst => rst,
                        i   => z2_adder_out_s,
                        o   => z2_out_s);

        z2_adder : entity work.adder(alg)
                generic map (
                        width => width)
                port map (
                        a => b2_mult_out_s,
                        b => a2_mult_out_s,
                        o => z2_adder_out_s,
                        f_ov => open,
                        f_z => open);

        b2_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => b2)
                port map (
                        i => i,
                        o => b2_mult_out_s);

        a2_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => -a2)
                port map (
                        i => o_s,
                        o => a2_mult_out_s);

        o <= o_reg_s;

        out_reg : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we => run_en,
                        rst => rst,
                        i => o_s,
                        o => o_reg_s);
        
        delayer : entity work.reg(alg)
                generic map (
                        width => delayer_width)
		port map (
			clk => clk, we => '1', rst => rst,
			i => delayer_in_s,
			o => delayer_out_s);

        single_delayer_gen: if (delayer_width = 1) generate
                delayer_in_s(0) <= run_en;
        end generate single_delayer_gen;
        
        broad_delayer_gen: if (delayer_width > 1) generate
                delayer_in_s(0) <= run_en;
                delayer_in_s(delayer_width - 1 downto 1) <= delayer_in(delayer_width - 1 downto 1);
        end generate broad_delayer_gen;

        delayer_out <= delayer_out_s;
        run_passthru <= std_logic(delayer_out_s(0));
end structural_tdfii;


-- *** Brief description ***
--
-- ** Specs **
--
-- Latency: 1 clk [pipeline is "registered" for reducing combinational path length]
-- Throughoutput: 2 samples/clk [internal state must be updated in 2 different steps]
architecture fast_structural_tdfii of filter_2nd_order_iir is
        signal o_s : std_logic_vector(width - 1 downto 0);
        signal o_reg_s : std_logic_vector(width - 1 downto 0);

        signal b0_mult_out_s, b1_mult_out_s, b2_mult_out_s : std_logic_vector(width - 1 downto 0);
        signal a1_mult_out_s, a2_mult_out_s : std_logic_vector(width - 1 downto 0);
        signal z1_out_s, z2_out_s : std_logic_vector(width - 1 downto 0);
        signal z1_adder_out_s, z2_adder_out_s : std_logic_vector(width - 1 downto 0);

        signal delayer_in_s, delayer_out_s : std_logic_vector(delayer_width - 1 downto 0);
begin
        b0_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => b0)
                port map (
                        i => i,
                        o => b0_mult_out_s);

        z0_adder : entity work.adder(alg)
                generic map (
                        width => width)
                port map (
                        a => b0_mult_out_s,
                        b => z1_out_s,
                        o => o_s,
                        f_ov => open,
                        f_z => open);

        z1 : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we  => std_logic(delayer_out_s(0)),
                        rst => rst,
                        i   => z1_adder_out_s,
                        o   => z1_out_s);

        z1_adder : entity work.tri_adder(beh)
                generic map (
                        width => width)
                port map (
                        a => b1_mult_out_s,
                        b => a1_mult_out_s,
                        c => z2_out_s,
                        o => z1_adder_out_s,
                        f_ov => open,
                        f_z => open);

        b1_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => b1)
                port map (
                        i => i,
                        o => b1_mult_out_s);

        a1_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => -a1)
                port map (
                        i => o_reg_s,
                        o => a1_mult_out_s);

        -- ESSENTIAL IDEA: we is the delayed run_en. That is, we can only update the delayer units
        -- on the second element cycle, once the correct 'new' output has been buffered. Also, on
        -- this second cycle, input value _cannot_ change. There we have the 2 cycles per sample
        -- throughput.
        z2 : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we  => std_logic(delayer_out_s(0)),
                        rst => rst,
                        i   => z2_adder_out_s,
                        o   => z2_out_s);

        z2_adder : entity work.adder(alg)
                generic map (
                        width => width)
                port map (
                        a => b2_mult_out_s,
                        b => a2_mult_out_s,
                        o => z2_adder_out_s,
                        f_ov => open,
                        f_z => open);

        b2_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => b2)
                port map (
                        i => i,
                        o => b2_mult_out_s);

        a2_mult : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec => prec,
                        k => -a2)
                port map (
                        i => o_reg_s,
                        o => a2_mult_out_s);

        o <= o_reg_s;

        -- out_reg must be updated with the new input on the first cycle.
        -- During 2nd cycle, out_reg must keep the new value so delayer elements can be correctly updated
        --
        -- As run_en MUST be kept to 1 JUST ON THE 1ST CYCLE for run_passthru elements with less
        -- than 1 sample/clk throughput, we can directly use here the run_en signal as the input for
        -- 'we' port.
        out_reg : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we => run_en,
                        rst => rst,
                        i => o_s,
                        o => o_reg_s);
        
        delayer : entity work.reg(alg)
                generic map (
                        width => delayer_width)
		port map (
			clk => clk, we => '1', rst => rst,
			i => delayer_in_s,
			o => delayer_out_s);

        single_delayer_gen: if (delayer_width = 1) generate
                delayer_in_s(0) <= run_en;
        end generate single_delayer_gen;
        
        broad_delayer_gen: if (delayer_width > 1) generate
                delayer_in_s(0) <= run_en;
                delayer_in_s(delayer_width - 1 downto 1) <= delayer_in(delayer_width - 1 downto 1);
        end generate broad_delayer_gen;

        delayer_out <= delayer_out_s;
        run_passthru <= std_logic(delayer_out_s(0));        
end fast_structural_tdfii;
