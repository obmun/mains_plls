--------------------------------------------------------------------------------
-- *** SPECS ***
-- Latency: 0 clks [output value for new input is instantaneous; combinational path exists between
-- input and output]
-- Troughoutput: 1 sample / cycle [internal state must be updated]
-- 
-- *** BRIEF DESCRIPTION ***
--
-- Class: sequential
--
-- Moving Average Filter, recursive implementation, with configurable delay (rejected harmonic
-- frequencies thru generic ports.
--
-- Works on clock's rising edge and has synchronous reset.
-- 
-- *** DESCRIPTION ***
--
-- Includes a synchronous reset port, which implements a reset on SOME OF THE INTERNAL MEMORY
-- ELEMENTS. See the reset subsection for instructions of how to CORRECTLY reset this element.
--
-- It's an "IIR", so you should be using extended precision! when instancing this thing. You have
-- been warned.
--
-- ** 0 latency **
--
-- A 0 latency means that, once you UPDATE THE INTERNAL STATE for a given input x[n], the new value at the
-- output is no longer y[n], but y`[n + 1] (we say y` because it's the output at n+1 for an input
-- x[n+1] = x[n]). You must register the output or make sure you use the output before updating the
-- internal state.
--
-- ** Proper resetting this entity **
--
-- A proper reset is ESSENTIAL for this filter. Being an IIR structure, you must reset it correctly.
-- The 'rst' port is NOT ENOUGH, as the big internal memory storage is not cleaned. You must do it
-- by yourself!
--
-- Steps:
-- 1) Give, as input, as many 0s as delay size was configured in the generic.
-- 2) After all the 0s have been consumed, and no other input has been given, do a reset.
--
-- * Why me? Why don't doing it inside the unit? *
--
-- This entity does not need a FSM. Usually, the block inmediately above using this is implemting
-- one.
-- 
-- == PORT DESCRIPTION ==
--
-- = Generics =
--
-- * width: ports and internal pipeline width
--
-- * prec: ports and internal pipeline precision
--
-- * delay: # of clocks of delay (at least 1)
--
-- * gain: an optional gain. Input signal is scaled by 1/delay. If you set a big delay, you're going
-- to run into precision problems. We recommend trying to use a gain > 1.0, so total input gain is a
-- value as close as possible to 0.1 - 1.0
-- 
-- *** Changelog ***
--
-- Revision 0.05 - CHANGED the implementation. This is the REAL ONE. Check PFC doc notes.
--
-- Revision 0.04 - With change of kcm, no input multiplying constant is real and user must not scale
-- it by SAMPLING_PERIOD as its done inside the kcm_integrator.
--
-- Revision 0.03 - Implement new seq. control iface. REALLY create the generic for freq. and k
-- control, instead of just advertising it in the brief description
--
-- Revision 0.02 - Added run / done style PORTS for syncronization with other sequential algorithms.
--
-- Revision 0.01 - File Created
--
-- *** Todo ***
-- | 1.- REVIEW SINTHESIS!!!
-- | 2.- Correctly implement RST behaviour!!!
-- | 3.- Rename architecture from beh (behavioural) to what really is: structural!
--------------------------------------------------------------------------------

#include "configuration.inc"

library IEEE;
library WORK;
use WORK.COMMON.all;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity fa is
        -- rev 0.04
        generic (
                width : natural := PIPELINE_WIDTH;
                prec : natural := PIPELINE_PREC;
                delay : natural;
                gain : real := 1.0;
                -- Seq. block iface
                delayer_width : natural := 1);
	port (
		clk, rst : in std_logic;
		i : in std_logic_vector(width - 1 downto 0);
		o : out std_logic_vector(width - 1 downto 0);
                run_en : in std_logic;
                run_passthru : out std_logic;
                delayer_in : in std_logic_vector(delayer_width - 1 downto 0);
                delayer_out : out std_logic_vector(delayer_width - 1 downto 0));
end fa;

architecture beh of fa is
        constant d_inv : real := 1.0 / real(delay);
	signal kcm_out_s, fifo_out_s, reg_out_s, sub_out_s, o_s : std_logic_vector(width - 1 downto 0);
begin
        kcm_i : entity work.kcm(CONF_KCM_ARCHITECTURE_STR)
                generic map (
                        width => width,
                        prec  => prec,
                        k     => gain * d_inv)
                port map (
                        i => i,
                        o => kcm_out_s);

	fifo_i : entity work.fifo(alg)
		generic map (
                        width => width,
                        size => delay)
		port map (
			i => kcm_out_s,
			o => fifo_out_s,
			clk => clk, we => run_en, rst => rst);

	sub_i : entity work.subsor(alg)
		generic map (
                        width => width)
		port map (
			a => kcm_out_s,
			b => fifo_out_s,
			o => sub_out_s,
                        -- Unconnected
                        f_ov => open,
                        f_z => open);

        reg_i : entity work.reg(alg)
                generic map (
                        width => width)
                port map (
                        clk => clk,
                        we  => run_en,
                        rst => rst,
                        i   => o_s,
                        o   => reg_out_s);

        add_i : entity work.adder(alg)
                generic map (
                        width => width)
                port map (
                        a    => sub_out_s,
                        b    => reg_out_s,
                        o    => o_s,
                        f_ov => open,
                        f_z  => open);

        o <= o_s;

        
        -- No need for a 'delayer', as this is a 0 clk latency block
        delayer_gen_0: if (delayer_width = 1) generate
        begin
             delayer: block is
             begin
                  run_passthru <= run_en;
             end block;
        end generate;
        
        delayer_gen_1: if (delayer_width > 1) generate
        begin
             delayer: block is
             begin
                  run_passthru <= run_en;
                  delayer_out(0) <= run_en;
                  delayer_out(delayer_width - 1 downto 1) <= delayer_in(delayer_width - 1 downto 1);
             end block;
        end generate;       
end beh;
