-- Copyright (c) 2012-2016 Jacobo Cabaleiro Cayetano
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

#include "configuration.inc"

library IEEE;
library WORK;
use WORK.COMMON.all;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;


--! @brief The PLL phase loop for the PLLMonofasicoImplementarBeta2 design (see
--! october_2007 paper), which on the PFC documentation is named Notch PLL.
--!
--! Class: sequential iterative
--!
--! *** Description ***
--!
--! Has: synchronous reset.
--!
--! ** Port description **
--!
--! rst -> Synchronous reset port. A reset ONLY initializes some seq elements to a initial known
--! state, but does not reset some big internal storage elements as buffers (see FA).
entity p2_phase_loop is
     port (
          clk, rst, run : in std_logic;
          input : in std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
          phase, norm_sin : out std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
          -- freq : out std_logic_vector(PIPELINE_WIDTH - 1 downto 0); I CANNOT SHOW FREQ!!!! 50 => 6 bits magnitude!!!!!!
          done : out std_logic);
end p2_phase_loop;


architecture beh of p2_phase_loop is
     -- Types
     type state_t is (ST_DONE, ST_RUNNING);

     type coef_1st_ord is array (0 to 1) of real;
     type coef_2nd_ord is array (0 to 2) of real;

        -- Some constants
        constant coef_2nd_ord_filt_num : coef_2nd_ord := (0.972, -1.94, 0.972);
        constant coef_2nd_ord_filt_den : coef_2nd_ord := (1.0, -1.94, 0.944);
        -- ORIGINAL COEFs for 1st ord IIR num: 300.0 and -282.3 coefs. Gain
        -- (200) is moved to freq2phase (before the integrator).
        constant coef_1st_ord_filt_num : coef_1st_ord := (1.500, -1.4115);
        constant coef_1st_ord_filt_den : coef_1st_ord := (1.0, -0.9704);

        constant IIR_FILTERS_PREC : natural := EXT_IIR_FILTERS_PREC;

     	signal st : state_t;

	-- Internal signals
	signal phase_s, phase_det_out_s : std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
        signal phase_det_done_s, phase_det_done_pulsed_s, iir_1st_ord_done_s, iir_2nd_ord_done_s : std_logic;
        signal phase_det_run_s : std_logic;
        signal iir_1st_ord_delayed_done_s, iir_2nd_ord_delayed_done_s, freq2phase_done_s, freq2phase_delayed_done_s : std_logic;
	-- > Filter signals
        signal phase_det_out_E_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
        signal iir_1st_ord_out_E_s, iir_2nd_ord_out_E_s : std_logic_vector(EXT_PIPELINE_WIDTH - 1 downto 0);
        signal iir_2nd_ord_out_s : std_logic_vector(PIPELINE_WIDTH - 1 downto 0);
        -- GARBAGE SIGNALS
        -- These are here because ModelSim complains about keeping a formal
        -- partially open (some of its bits are asigned, other are opened), and
        -- ModelSim requires, at the same time, all of the formal bits to be
        -- mapped to a signal. The only way is to use garbage signals, that
        -- later during synthesis get deleted by the synthesizer.
        signal garbage_1_s, garbage_2_s, garbage_3_s : std_logic;
begin
	-- ** Big blocks **
	phase_det_i : entity work.p2_phase_det(structural)
		port map (
			run => phase_det_run_s,
                        rst => rst, clk => clk,
			input => input,
			curr_phase => phase_s,
			-- Out value signals
			phase_error => phase_det_out_s,
			norm_output => norm_sin,
			-- Out control signals
			done => phase_det_done_s);

        phase_det_done_pulser : entity work.done_pulser(beh)
                port map (
                        clk => clk, en  => '1', rst => rst,
                        i   => phase_det_done_s,
                        o   => phase_det_done_pulsed_s);
        
	-- Error filters, wrapped around conv
        iir_input_conv : entity work.pipeline_conv(alg)
                generic map (
                        in_width  => PIPELINE_WIDTH,
                        in_prec   => PIPELINE_PREC,
                        out_width => EXT_PIPELINE_WIDTH,
                        out_prec  => IIR_FILTERS_PREC)
                port map (
                        i => phase_det_out_s,
                        o => phase_det_out_E_s);

        -- Latency: 1 clk for any of the available architectures
        iir_1st_ord : entity work.filter_1st_order_iir(CONF_IIR_ARCHITECTURE_STR)
                generic map (
                        width => EXT_PIPELINE_WIDTH, prec => IIR_FILTERS_PREC,
                        b0 => coef_1st_ord_filt_num(0),
                        b1 => coef_1st_ord_filt_num(1),
                        a1 => coef_1st_ord_filt_den(1),
                        delayer_width => 2)
                port map (
                        clk => clk, rst => rst,
                        i => phase_det_out_E_s,
                        o => iir_1st_ord_out_E_s,
                        run_en => phase_det_done_pulsed_s,
                        run_passthru => iir_1st_ord_done_s,
                        delayer_in(0) => '-',
                        delayer_in(1) => phase_det_done_s,
                        delayer_out(0) => garbage_1_s,
                        delayer_out(1) => iir_1st_ord_delayed_done_s);

        -- Latency: 1 clk, independently of IIR arch
        -- Throughput: 2 clks/value or 1 clk/value, depending on architecture
        iir_2nd_ord : entity work.filter_2nd_order_iir(CONF_IIR_ARCHITECTURE_STR)
                generic map (
                        width => EXT_PIPELINE_WIDTH, prec => IIR_FILTERS_PREC,
                        b0 => coef_2nd_ord_filt_num(0),
                        b1 => coef_2nd_ord_filt_num(1),
                        b2 => coef_2nd_ord_filt_num(2),
                        a1 => coef_2nd_ord_filt_den(1),
                        a2 => coef_2nd_ord_filt_den(2),
                        delayer_width => 2)
                port map (
                        clk => clk, rst => rst,
                        i => iir_1st_ord_out_E_s,
                        o => iir_2nd_ord_out_E_s,
                        run_en => iir_1st_ord_done_s,
                        run_passthru => iir_2nd_ord_done_s,
                        delayer_in(0) => '-',
                        delayer_in(1) => iir_1st_ord_delayed_done_s,  -- Remember that this is
                                                                      -- propagating the 'done' from
                                                                      -- the phase detector
                        delayer_out(0) => garbage_2_s,
                        delayer_out(1) => iir_2nd_ord_delayed_done_s);

        iir_output_conv : entity work.pipeline_conv(alg)
                generic map (
                        in_width  => EXT_PIPELINE_WIDTH,
                        in_prec   => IIR_FILTERS_PREC,
                        out_width => PIPELINE_WIDTH,
                        out_prec  => PIPELINE_PREC)
                port map (
                        i => iir_2nd_ord_out_E_s,
                        o => iir_2nd_ord_out_s);

        -- Latency: 0 clks
	freq2phase_i : entity work.freq2phase(beh)
                generic map (
                        width => PIPELINE_WIDTH,
                        prec => PIPELINE_PREC,
                        gain => 200.0 * 0.69,  -- Reduced gain to achieve
                                               -- better stability (phase
                                               -- margin) JESUS
                        delayer_width => 2)
		port map (
			clk => clk, rst => rst,
			f => iir_2nd_ord_out_s,
			p => phase_s,
                        run_en => iir_2nd_ord_done_s,
                        run_passthru => freq2phase_done_s,
                        delayer_in(0) => '-',
                        delayer_in(1) => iir_2nd_ord_delayed_done_s, -- Phase detector 'done'
                                                                     -- propagated. It's really _unneeded_!
                        delayer_out(0) => garbage_3_s,
                        delayer_out(1) => freq2phase_delayed_done_s);

        -- As output is directly connected to the NCO (freq2phase componente), but this block has
        -- a latency of 0 clks, once internal state is updated, the output is going to be incorrect, so we
        -- must _register_ it.

        phase_reg_i : entity work.reg(alg)
             generic map (
                  width => PIPELINE_WIDTH)
             port map (
                  clk => clk,
                  rst => rst,
                  we  => freq2phase_done_s,
                  i => phase_s,
                  o => phase);
        

        -- ==== ==== FSM ==== ==== --
        state_ctrl : process(clk, run, freq2phase_done_s, phase_det_done_s)
	begin
             if (rising_edge(clk)) then
                  if (rst = '1') then
                       st <= ST_DONE;
                  else
                       case st is
                            when ST_DONE =>
                                 if (run = '1') then
                                      st <= ST_RUNNING;
                                 else
                                      st <= ST_DONE;
                                 end if;
                            when ST_RUNNING =>
                                 if (freq2phase_done_s = '1' and phase_det_done_s = '1') then
                                      -- When freq2phase has finished, I'm not really DONE yet, as
                                      -- output value must be registered on next rising edge.
                                      --
                                      -- But next clk cycle it's true that everything is done, so I
                                      -- can advance.
                                      --
                                      -- On some designs, I was using this state to generate the
                                      -- "during this cycle everything is ready" done signal. We
                                      -- don't do it here because with this scheme I'll be putting
                                      -- the signal to one 1 cycle in advance due to the output reg.
                                      st <= ST_DONE;
                                 else
                                      st <= ST_RUNNING;
                                 end if;
                            when others =>
                                 report "Unkown Cordic state! Should not happen!"
                                      severity failure;
                                 st <= st;
                       end case;
                  end if;
             end if;
	end process state_ctrl;

	signals_gen : process(st, run)
	begin
             case st is
                  when ST_DONE =>
                       phase_det_run_s <= run;
                       done <= '1';
                  when ST_RUNNING =>
                       phase_det_run_s <= '0';
                       done <= '0';
                  when others =>
                       phase_det_run_s <= '0';
                       done <= '0';
             end case;
	end process signals_gen;
        -- The previous solution, reproduced below, WORKED just PARTIALLY:
        -- done <= freq2phase_delayed_done_s and phase_det_done_s;
        --
        -- I say "partially" because it did not work when block was reset!
        --
        -- This block follows full run_done iface, so when a rst is issued, the output 'done' port
        -- must be set to 1 _inmediately_.
        --
        -- At the same time, every internal element with memory must be also reset. run_passthru
        -- blocks must be therefore reset. But a reset of a run_passthru element, sets delayer
        -- ouputs to 0!
        --
        -- So, using the above solution, a reset would correctly set the 'done' output of the
        -- phase_det to '1', but also would set the delayer registers inside the run_passthru
        -- filtering elements to 0! While the phase_det done propagates thru the filters chain, the
        -- phase detector done output remains at 0 for a certain number of cycles. This BREAKS the
        -- run_done specification
        --
        -- The solution was to use a very simple state machine for this task        
end beh;
